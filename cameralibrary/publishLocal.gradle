apply plugin: 'maven-publish'
apply plugin: 'com.Android.library'

//task sourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    //classifier = 'sources' // Deprecated.
//    archiveClassifier.set("sources")
//}
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from Android.sourceSets.main.Java.srcDirs
}

artifacts {
    archives androidSourcesJar
}
//task sourceJar(type: Jar) {
//    from sourceSets.main.allJava
//    archiveClassifier = "sources"
//}

//tasks {
//
//    val sourcesJar by creating(Jar::class) {
//        dependsOn(JavaPlugin.CLASSES_TASK_NAME)
//        //classifier = "sources"
//        archiveClassifier.set("sources")
//        from(java.sourceSets["main"].allSource)
//    }
//}
//
//artifacts {
//    archives javadocJar
//    archives sourcesJar
//}

project.afterEvaluate {
    publishToMavenLocal {
        def groupId = LIBRARY_GROUP
        def artifactId = LIBRARY_ARTIFACT_ID
        def versionName = LIBRARY_VERSION_NAME + "-local"
        def debugSuffix = "-debug"
        def releaseSuffix = "-release"
        publishing {
            publications {
                LibraryRelease(MavenPublication) {
                    from components.release
                    artifact(sourceJar)
                    setGroupId groupId
                    setArtifactId artifactId
                    version versionName + releaseSuffix
                }
                LibraryDebug(MavenPublication) {
                    from components.debug
                    artifact(sourceJar)
                    setGroupId groupId
                    setArtifactId artifactId
                    version versionName + debugSuffix
                }
            }
            publications.all {
                pom.withXml {
                    asNode().dependencies.'*'
                            .findAll() {
                                it.scope.text() == 'runtime' &&
                                        project.configurations.implementation.allDependencies.find {
                                            dep -> dep.name == it.artifactId.text()
                                        }
                            }.each { it.scope*.value = 'compile'}
                }
            }
        }

        doLast {
            def prettyPrint = {
                1.upto(100, { print "=" })
                println()
            }
            println()
            prettyPrint()
            println "PUBLICATION FINISHED"
            println "Artifact RELEASE: " + groupId + ":" + artifactId +  ":" + versionName + releaseSuffix
            println "Artifact DEBUG: " + groupId + ":" + artifactId +  ":" + versionName + debugSuffix
            prettyPrint()
        }
    }
}