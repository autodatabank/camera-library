plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'maven-publish'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31
        versionCode 22071301
        versionName "0.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    resourcePrefix 'adb_cameralibrary_'

    namespace = 'kr.co.kadb.cameralibrary'
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Kotlin.
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.21"
    //implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.3'

    // Android Support Library.
    implementation 'androidx.activity:activity-ktx:1.5.0'
    implementation 'androidx.fragment:fragment-ktx:1.5.0'

    //WindowManager
    implementation 'androidx.window:window:1.1.0-alpha02'

    // CameraX core library
    def camerax_version = '1.1.0'
    implementation "androidx.camera:camera-core:$camerax_version"
    // CameraX Camera2 extensions
    implementation "androidx.camera:camera-camera2:$camerax_version"
    // CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    // CameraX View class
    implementation "androidx.camera:camera-view:$camerax_version"

    // ACC.
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0'

    // Gson.
    implementation 'com.google.code.gson:gson:2.9.0'

    // Dexter.
    implementation 'com.karumi:dexter:6.2.3'

    // Timber.
    implementation 'com.jakewharton.timber:timber:5.0.1'
}

//afterEvaluate {
//    publishing {
//        publications {
//            release(MavenPublication) {
//                from components.release
//
//                groupId = 'com.github.autodatabank'
//                artifactId = 'camera-library'
//                version = '0.0.1'
//
//                pom.withXml {
//                    final dependenciesNode = asNode().appendNode('dependencies')
//
//                    ext.addDependency = { Dependency dep, String scope ->
//                        final dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', dep.group)
//                        dependencyNode.appendNode('artifactId', dep.group == groupId ? dep.name.substring(9) : dep.name)
//                        dependencyNode.appendNode('version', dep.version)
//                        dependencyNode.appendNode('scope', scope)
//
//                        if (!dep.transitive) {
//                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
//                            exclusionNode.appendNode('groupId', '*')
//                            exclusionNode.appendNode('artifactId', '*')
//                        } else if (!dep.properties.excludeRules.empty) {
//                            // Otherwise add specified exclude rules
//                            final exclusionsNode = dependencyNode.appendNode('exclusions')
//                            dep.properties.excludeRules.each { ExcludeRule rule ->
//                                def exclusion = exclusionsNode.appendNode('exclusion')
//                                exclusion.appendNode('groupId', rule.group ?: '*')
//                                exclusion.appendNode('artifactId', rule.module ?: '*')
//                            }
//                        }
//                    }
//
//                    configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
//                    configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
//                }
//            }
//            debug(MavenPublication) {
//                from components.debug
//
//                groupId = 'com.github.autodatabank'
//                artifactId = 'camera-library'
//                version = '0.0.1'
//
//                pom.withXml {
//                    final dependenciesNode = asNode().appendNode('dependencies')
//
//                    ext.addDependency = { Dependency dep, String scope ->
//                        final dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', dep.group)
//                        dependencyNode.appendNode('artifactId', dep.group == groupId ? dep.name.substring(9) : dep.name)
//                        dependencyNode.appendNode('version', dep.version)
//                        dependencyNode.appendNode('scope', scope)
//
//                        if (!dep.transitive) {
//                            final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
//                            exclusionNode.appendNode('groupId', '*')
//                            exclusionNode.appendNode('artifactId', '*')
//                        } else if (!dep.properties.excludeRules.empty) {
//                            // Otherwise add specified exclude rules
//                            final exclusionsNode = dependencyNode.appendNode('exclusions')
//                            dep.properties.excludeRules.each { ExcludeRule rule ->
//                                def exclusion = exclusionsNode.appendNode('exclusion')
//                                exclusion.appendNode('groupId', rule.group ?: '*')
//                                exclusion.appendNode('artifactId', rule.module ?: '*')
//                            }
//                        }
//                    }
//
//                    configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
//                    configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
//                }
//            }
//        }
//    }
//}

//afterEvaluate {
//    def artifactId = 'camera-library'
//    def artifactPath = "$buildDir/outputs/aar/cameralibrary-debug.aar"
//    publishing {
//        publications {
//            maven(MavenPublication) {
//                setGroupId android.namespace
//                setArtifactId artifactId
//                version android.defaultConfig.versionName
//
//                artifact(artifactPath)
////                    artifact(sourceJar)
//
//                //aar artifact you want to publish
//
//                //generate pom nodes for dependencies
//                pom.withXml {
//                    def dependenciesNode = asNode().appendNode('dependencies')
//                    configurations.implementation.allDependencies.each { dependency ->
//                        if (dependency.name != 'unspecified') {
//                            def dependencyNode = dependenciesNode.appendNode('dependency')
//                            dependencyNode.appendNode('groupId', dependency.group)
//                            dependencyNode.appendNode('artifactId', dependency.name)
//                            dependencyNode.appendNode('version', dependency.version)
//                        }
//                    }
//                }
//            }
//        }
//    }
//}


//
//task sourceJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier "sources"
//}

afterEvaluate {
    publishToMavenLocal {
        def groupId = 'com.github.autodatabank'
        def artifactId = 'camera-library'
        def artifactPath = "$buildDir/outputs/aar/cameralibrary-debug.aar"
        publishing {
//            repositories {
//                maven {
//                    name = artifactId
//                    //url = "file://${buildDir}/repo"
//                }
//            }
            publications {
                maven(MavenPublication) {
                    setGroupId groupId//android.namespace
                    setArtifactId artifactId
                    version android.defaultConfig.versionName

//                    artifact(artifactPath)
//                    artifact(sourceJar)

                    //aar artifact you want to publish

                    //generate pom nodes for dependencies
                    pom.withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        configurations.implementation.allDependencies.each { dependency ->
                            if (dependency.name != 'unspecified') {
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', dependency.group)
                                dependencyNode.appendNode('artifactId', dependency.name)
                                dependencyNode.appendNode('version', dependency.version)
                            }
                        }
                    }
                }
            }
        }

        doLast {
            def prettyPrint = {
                1.upto(100, { print "=" })
                println()
            }
            println()
            prettyPrint()
            println "PUBLICATION FINISHED"
            println "Artifact : $artifactPath"
            println "Artifact RELEASE: " + groupId + ":" + artifactId +  ":" + android.defaultConfig.versionName
            println "Artifact DEBUG: " + groupId + ":" + artifactId +  ":" + android.defaultConfig.versionName
            prettyPrint()
        }
    }
}
